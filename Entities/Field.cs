using System.Collections.Generic;

namespace BS.Common.Entities
{
    /// <summary>
    /// Specifies the attributes of an entity property or field. It represents a table column.
    /// </summary>
    /// <history>
    ///     <change date="07/31/2013" author="Christian Beltran">
    ///         Initial Version.
    ///     </change>
    /// </history>
    public class Field
    {
        /// <summary>
        /// List of valid data base types
        /// </summary>
        public enum DBType
        {
            /// <summary>
            /// Varchar type
            /// </summary>
            Varchar,
            /// <summary>
            /// Date type
            /// </summary>
            Date,
            /// <summary>
            /// Datetime type
            /// </summary>
            DateTime,
            /// <summary>
            /// Integer type
            /// </summary>
            Integer,
            /// <summary>
            /// Decimal type
            /// </summary>
            Decimal,
            /// <summary>
            /// Bit type
            /// </summary>
            Bit,
            /// <summary>
            /// VarBinary type
            /// </summary>
            Varbinary,
            /// <summary>
            /// Encrypt internal type
            /// </summary>
            Encrypt
        };

        /// <summary>
        /// List of valid Foreing key types
        /// </summary>        
        public enum FKType
        {
            /// <summary>
            /// Inner foreing key types
            /// </summary>
            Inner,
            /// <summary>
            /// Left foreing key types
            /// </summary>
            Left,
            /// <summary>
            /// Right foreing key types
            /// </summary>
            Right
        };

        
        /// <summary>
        /// The name of the column.
        /// </summary>
        public string Name { get; set; }
        
        /// <summary>
        /// The name of the database column
        /// </summary>
        public string DBName { get; set; }
        
        /// <summary>
        /// Specifies the field is the primary key of an entity, defaults to false.
        /// </summary>
        public bool Id { get; set; }
        
        /// <summary>
        /// Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()
        /// </summary>
        public string DefaultVal { get; set; }
        
        /// <summary>
        /// Specifies the field data type
        /// </summary>
        public DBType DataType { get; set; }

        /// <summary>
        /// Specifies whether the column is included in SQL INSERT statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.
        /// </summary>
        public bool Insertable { get; set; }

        /// <summary>
        /// Specifies whether the column is included in SQL UPDATE statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.
        /// </summary>
        public bool Updatable { get; set; }
        
        /// <summary>
        /// Specifies that the Entity will be join with another table using this field. This is only used in SQL SELECT statements  generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to null.
        /// </summary>
        public ForeignKeyInfo ForeignKey { get; set; }

        /// <summary>
        /// Creates an empty field, the field would not be ready to be added to an Entity until at least the name has been specified.
        /// </summary>
        public Field() : this("", false)
        {
        }

        /// <summary>
        /// Creates a field with the specified name.
        /// </summary>
        /// <param name="name">The name of the column.</param>
        public Field(string name) : this(name, false)
        {
        }

        /// <summary>
        /// Creates a field with the specified name and foreign key
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="foreignKey">Specifies that the Entity will be join with another table using this field. This is only used in SQL SELECT statements.</param>
        public Field(string name, ForeignKeyInfo foreignKey)
            : this(name, false, "", DBType.Varchar, true, true, foreignKey)
        {
        }

        /// <summary>
        /// Creates a field with the specified name, data type and foreign key
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="dataType">Specifies the field data type.</param>
        /// <param name="foreignKey">Specifies that the Entity will be join with another table using this field. This is only used in SQL SELECT statements.</param>
        public Field(string name, DBType dataType, ForeignKeyInfo foreignKey)
            : this(name, false, "", dataType, true, true, foreignKey)
        {
        }

        /// <summary>
        /// Creates a field with the specified name and insertable, Updatable values
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="insertable">Specifies whether the column is included in SQL INSERT statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>.</param>
        /// <param name="updatable">Specifies whether the column is included in SQL UPDATE statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>.</param>
        public Field(string name, bool insertable, bool updatable)
            : this(name, false, "", DBType.Varchar, insertable, updatable, null)
        {
        }

        /// <summary>
        /// Creates a field with the specified name and id value
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="id">Specifies the field or column is the primary key of the entity.</param>
        public Field(string name, bool id) : this(name, id, "")
        {
        }
        /// <summary>
        /// Creates a field with the specified name and data type
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="dataType">Specifies the field data type.</param>
        public Field(string name, DBType dataType)
            : this(name, false, "", dataType, true, true, null)
        {
        }

        /// <summary>
        /// Creates a field with the specified name and default value
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        public Field(string name, string defaultVal) : this(name, false, defaultVal)
        {
        }

        /// <summary>
        /// Creates a field with the specified name, id and default value
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="id">Specifies the field is the primary key of an entity, defaults to false.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        public Field(string name, bool id, string defaultVal)
            : this(name, id, defaultVal, DBType.Varchar)
        {
        }

        /// <summary>
        /// Creates a field with the specified values
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="id">Specifies the field is the primary key of an entity, defaults to false.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        /// <param name="dataType">Specifies the field data type</param>
        public Field(string name, bool id, string defaultVal, DBType dataType)
            : this(name, id, defaultVal, dataType, true)
        {
        }

        /// <summary>
        /// Creates a field with the specified values
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="id">Specifies the field is the primary key of an entity, defaults to false.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        /// <param name="dataType">Specifies the field data type</param>
        /// <param name="insertable">Specifies whether the column is included in SQL INSERT statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        public Field(string name, bool id, string defaultVal, DBType dataType, bool insertable) :
            this(name, id, defaultVal, dataType, insertable, true)
        {
        }

        /// <summary>
        /// Creates a field with the specified values
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="id">Specifies the field is the primary key of an entity, defaults to false.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        /// <param name="dataType">Specifies the field data type</param>
        /// <param name="insertable">Specifies whether the column is included in SQL INSERT statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        /// <param name="updatable">Specifies whether the column is included in SQL UPDATE statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        public Field(string name, bool id, string defaultVal, DBType dataType, bool insertable, bool updatable) :
            this(name, id, defaultVal, dataType, insertable, updatable, null)
        {
        }

        /// <summary>
        /// Creates a field with the specified values
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="id">Specifies the field is the primary key of an entity, defaults to false.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        /// <param name="dataType">Specifies the field data type</param>
        /// <param name="insertable">Specifies whether the column is included in SQL INSERT statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        /// <param name="updatable">Specifies whether the column is included in SQL UPDATE statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        /// <param name="foreignKey">Specifies that the Entity will be join with another table using this field. This is only used in SQL SELECT statements  generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to null.</param>
        public Field(string name, bool id, string defaultVal, DBType dataType, bool insertable, bool updatable, ForeignKeyInfo foreignKey) :
            this(name, name, id, defaultVal, dataType, insertable, updatable, foreignKey)
        {
        }

        /// <summary>
        /// Creates a field with the specified values
        /// </summary>
        /// <param name="name">The name of the column.</param>
        /// <param name="dbName">The database name of the column.</param>
        /// <param name="id">Specifies the field is the primary key of an entity, defaults to false.</param>
        /// <param name="defaultVal">Overrides the value of a field if it's specified, for example if you want to default the value of a date field to GETDATE()</param>
        /// <param name="dataType">Specifies the field data type</param>
        /// <param name="insertable">Specifies whether the column is included in SQL INSERT statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        /// <param name="updatable">Specifies whether the column is included in SQL UPDATE statements generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to true.</param>
        /// <param name="foreignKey">Specifies that the Entity will be join with another table using this field. This is only used in SQL SELECT statements  generated by the <see cref="T:EPE.Common.Utils.QueryBuilder"/>, defaults to null.</param>
        public Field(string name, string dbName, bool id, string defaultVal, DBType dataType, bool insertable, bool updatable, ForeignKeyInfo foreignKey)
        {
            this.Name = name;
            this.DBName = dbName;
            this.Id = id;
            this.DefaultVal = defaultVal;
            this.DataType = dataType;
            this.Insertable = insertable;
            this.Updatable = updatable;
            this.ForeignKey = foreignKey;
        }

        /// <summary>
        /// Returns the Field Database type.
        /// </summary>
        /// <returns>The DbType</returns>
        public System.Data.DbType GetDbType()
        {
            if (this.DataType == DBType.Integer)
            {
                return System.Data.DbType.Int32;
            }
            else if (this.DataType == DBType.Date)
            {
                return System.Data.DbType.Date;
            }
            else if (this.DataType == DBType.DateTime)
            {
                return System.Data.DbType.DateTime;
            }
            else if (this.DataType == DBType.Decimal)
            {
                return System.Data.DbType.Decimal;
            }
            else if (this.DataType == DBType.Bit)
            {
                return System.Data.DbType.Boolean;
            }
            else if (this.DataType == DBType.Varbinary)
            {
                return System.Data.DbType.Binary;
            }
          

            return System.Data.DbType.String;
        }
    }

    /// <summary>
    /// Specifies the attributes of a foreign key
    /// </summary>
    public class ForeignKeyInfo
    {
        private IList<string> _joinFields;
        
        /// <summary>
        /// The join table name
        /// </summary>
        public string TableName { get; set; }
        
        /// <summary>
        /// The field that will be used to join the tables
        /// </summary>
        public string JoinField { get; set; }

        /// <summary>
        /// Foreing key type  
        /// </summary>
        public Field.FKType Type { get; set; }

        /// <summary>
        /// From table this is used when you want to join with another table 
        /// </summary>
        public string FromTable { get; set; }

        /// <summary>
        /// The list of fields that will be retrieved from the specified TableName 
        /// </summary>
        public IList<string> JoinFields
        {
            get
            {

                if (_joinFields == null)
                {
                    _joinFields = new List<string>();
                }

                return this._joinFields;
            }

            set { }
        }

        /// <summary>
        /// Creates a ForeignKeyInfo instance
        /// </summary>
        public ForeignKeyInfo()
        {
        }

        /// <summary>
        /// Creates a ForeingKey with the specified table name and join field
        /// </summary>
        /// <param name="tableName">The join table name</param>
        /// <param name="joinField">The field that will be used to join the tables</param>
        public ForeignKeyInfo(string tableName, string joinField) : this(tableName, joinField, null)
        {
        }
        
        /// <summary>
        /// Creates a ForeingKey with the specified table name, join field and the list of fields that will be retrieved 
        /// from the join table.
        /// </summary>
        /// <param name="tableName">The join table name</param>
        /// <param name="joinField">The field that will be used to join the tables</param>
        /// <param name="joinFields">The list of fields that will be retrieved from the specified TableName</param>
        public ForeignKeyInfo(string tableName, string joinField, string[] joinFields) : this(Field.FKType.Inner, tableName, joinField, joinFields)
        {                        
        }

        /// <summary>
        /// Creates a ForeingKey with the specified table name, join field and the list of fields that will be retireved 
        /// from the join table.
        /// </summary>
        /// <param name="tableName">The join table name</param>
        /// <param name="joinField">The field that will be used to join the tables</param>
        /// <param name="joinFields">The list of fields that will be retrieved from the specified TableName</param>
        public ForeignKeyInfo(string tableName, string joinField, IList<string> joinFields) : this(tableName, joinField)
        {
            this.JoinFields = joinFields;
        }

        /// <summary>
        /// Creates a ForeingKey with the specified table name, join field and the list of fields that will be retireved 
        /// from the join table.
        /// </summary>
        /// <param name="type">The foreign key type</param>
        /// <param name="tableName">The join table name</param>
        /// <param name="joinField">The field that will be used to join the tables</param>
        /// <param name="joinFields">The list of fields that will be retrieved from the specified TableName</param>
        public ForeignKeyInfo(Field.FKType type, string tableName, string joinField, string[] joinFields)
            : this(type, tableName, joinField, joinFields, "")
        {            
        }

        /// <summary>
        /// Creates a ForeingKey with the specified table name, join field and the list of fields that will be retireved 
        /// from the join table.
        /// </summary>
        /// <param name="type">The foreign key type</param>
        /// <param name="tableName">The join table name</param>
        /// <param name="joinField">The field that will be used to join the tables</param>
        /// <param name="joinFields">The list of fields that will be retrieved from the specified TableName</param>
        /// <param name="fromTable">The list of fields that will be retrieved from the specified TableName</param>
        public ForeignKeyInfo(Field.FKType type, string tableName, string joinField, string[] joinFields, string fromTable)
        {
            this.TableName = tableName;
            this.JoinField = joinField;
            this.Type = type;
            this.FromTable = fromTable;
            if (joinFields != null)
            {
                foreach (string jf in joinFields)
                {
                    this.JoinFields.Add(jf);
                }
            }
        }
    }
}